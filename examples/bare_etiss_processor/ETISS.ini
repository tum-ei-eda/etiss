
;############################### Configurations ################################
; All configurations can be overwritten with program arguments (Section names
; are not necessary):
;
; ./main [-o<option> <value>] [-f[no]<flag>]
;
; Bool configurations can be set with -f. The optional no sets the flag to
; false. The default value is true. All other configurations can be set with -o.


; In this section all available configurations in ETISS of type string can be
; set.
[StringConfigurations]

  ; Working directory. Used by TCCJIT, CPUArch, addLibrary
  ; It will be set to const in the etiss::Initialiser, cause it must not
  ; change while runtime.
  ; default=

  ;etiss_wd=

  ; The binary file for the target software of the simulation. Example software
  ; exists under the folder SW, but it must be compiled first.
  ; ATTENTION: If you change the CPU Architectur you have to change the
  ;            software, too!
  ;
  ; ARMv6M: ../SW/arm/build/code.bin
  ; RISCV : ../SW/riscv/build/code.bin
  ; default (or1k)=../SW/or1k/build/code.bin
  sw_binary_rom=../SW/riscv/build/riscv_example.rom
  sw_binary_ram=../SW/riscv/build/riscv_example.ram

  ; Select architectur type of the CPU.
  ; Currently available:
  ; - or1k
  ; - ARMv6M
  ; - RISCV
  ; - RISCV64
  ; ATTENTION: If you change the CPU Architectur you have to change the
  ;            software, too!

  CPUArch=RISCV

  ; Select a jit manually.
  ; Available are:
  ; - GCCJIT
  ; - LLVMJIT
  ; - TCCJIT
  ; default=GCCJIT
  
  JIT_Type=TCCJIT


; In this section all available configurations in ETISS of type bool can be set.
[BoolConfigurations]

  ; When instantiating an OR1K CPUArchitecure, it can be configured to ignore
  ; range exceptions.
  ; default = false

  norangeexception=false

  ; When instantiating an OR1K CPUArchitecure, it can be configured to  use a
  ; return statement instead of ending a block at a jump
  ; default = false

  returnjump=false

  ; When instantiating an OR1K CPUArchitecure, it can be configured to  use host
  ; endianness. No byte swapping will be performed.
  ; default = false

  hostendianness=false

  ; When instantiating an OR1K CPUArchitecure, it can be configured to  ignore
  ; the IEE flag of the SR register.
  ; default = false

  ignore_sr_iee=false

  ; When destructing the GCC JIT it can clean up the created files.
  ; dafault = true

  cleanup=true

  ; Enable test for JIT compability to ETISS
  ; default = true

  verifyJIT=false

  ; ETISS can copy the c header files to the etiss_wd. This is needed by the
  ; JITs
  ; default = true

  copy-headers=true

  ; You can transfer controll to etiss console on SIGINT (Signal Interrupt).
  ; E.g. ctrl + c is handeld by etiss::console
  ; default = false

  sigint-console=false

  ; Load all available Libraries in ETISSHOME and working directory
  ; default = true

  library-loading=true

  ; Load integrated Libraries
  ; Available for
  ; default = true

  integrated-library=true

  ;                                       ToDo etiss::py::console();
  ; default = false

  pyconsole=false

  ;

  jit-debug=true

  ; Print Debug outputs to std::cout for Bus accesses on the Debug System
  ; default=false

	DebugSystem::printIbusAccess=false
	DebugSystem::printDbusAccess=false
	DebugSystem::printDbgbusAccess=false


; In this section all available configurations in ETISS of type int can be set.
[IntConfigurations]

  ; The log levels determine the produeced output. The following are
  ; implemented:
  ;   0 = etiss::SILENT
  ;   1 = etiss::FATALERROR
  ;   2 = etiss::ERROR
  ;   3 = etiss::WARNING
  ;   4 = etiss::INFO
  ;   5 = etiss::VERBOSE

  loglevel=2

  ; For simulating cache or bus delay additional cycles before an instruction
  ; can be added. ifStallCycles defines the number of cycles.
  ; default = 0

  ifStallCycles=0

  ; Set max size for a basic block.
  ; This parameter defines how much instructions can maximally put together in
  ; one file for the just in time compiler.
  ; ATTENTION: Coroutines will only called after a basic block has finished.
  ;            Thus any synchronisation of the coroutines will only be done
  ;            thereafter. So in some cases e.g. Interupts will evaluated not
  ;            before a block ends.

  Translation::MaxBlockSize=100

  ; Set CPU freuquency in pico seconds
  ; (or1k)   default=10000
  ; (ARMv6M) default=31250

  Arch::cpuCycleTime_ps=10000



;############################# INTEGRATED PLUGINS ##############################

; a plugin that print the instruction and its address when
; it is executed
;[Plugin PrintInstruction]




; adds a gdb debug server (connect with "target remote localhost:2222")
; minPcAlign: PC LSBs aligment. E.g. 1 for 16 bits instuction, 2 for 32 bits, 3 for 64 bits
;[Plugin gdbserver]
;  port=2222
;  minPcAlign=1



; adds a Logger Plugin
; NOTE: the logger plugin is of the type etiss::SystemWrapperPlugin and will
; wrap the passed system before it is used by the cpu to be able to redirect
; reads/writes for the logging address range.
[Plugin Logger]
  logaddr=0x80000000
  logmask=0xF0000000




; injects errors after an block into registers
;[Plugin BlockAccurateHandler]
;  -rR5=./fail_set_00000
;  -rR6=./fail_set_00000
;  -rR7=./fail_set_00000
;  -rR8=./fail_set_00000
;  -rR10=./fail_set_00000
;  -rR14=./fail_set_00000
;  -rR15=./fail_set_00000
;  -rR16=./fail_set_00000
;  -rR17=./fail_set_00000
;  -rR18=./fail_set_00000
;  -rR19=./fail_set_00000
;  -rR20=./fail_set_00000
